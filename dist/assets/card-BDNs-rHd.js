var u=Object.defineProperty;var m=(r,t,e)=>t in r?u(r,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):r[t]=e;var o=(r,t,e)=>m(r,typeof t!="symbol"?t+"":t,e);class h{constructor(t){o(this,"cards",new Map);o(this,"container",null);this.container=t||this.createContainer()}createContainer(){const t=document.createElement("div");return t.className="card-container flex flex-wrap gap-4 p-4",t}createCard(t){return this.cards.set(t.id,t),this.renderCard(t)}renderCard(t){const e=document.createElement("div");e.className=`card bg-base-100 shadow-xl ${t.className||""}`,e.setAttribute("data-card-id",t.id);const s=document.createElement("div");s.className="card-body";const c=document.createElement("h2");if(c.className="card-title",c.textContent=t.title,t.subtitle){const a=document.createElement("p");a.className="text-sm text-gray-500 mb-2",a.textContent=t.subtitle,s.appendChild(a)}s.appendChild(c);const d=document.createElement("div");if(d.className="card-content",d.innerHTML=t.content,s.appendChild(d),t.actions&&t.actions.length>0){const a=document.createElement("div");a.className="card-actions justify-end mt-4",t.actions.forEach(n=>{const i=document.createElement("button");i.className=`btn btn-sm btn-${n.variant||"primary"}`,i.textContent=n.text,i.setAttribute("data-action-id",n.id),i.disabled=n.disabled||!1,i.addEventListener("click",l=>{l.preventDefault(),l.stopPropagation(),n.disabled||n.onClick()}),a.appendChild(i)}),s.appendChild(a)}if(t.status&&t.status!=="default"){const a=document.createElement("div");a.className=`status-indicator status-${t.status}`;const n=this.getStatusIcon(t.status);a.innerHTML=n,e.appendChild(a)}return e.appendChild(s),e}getStatusIcon(t){switch(t){case"success":return'<span class="status-icon success">✓</span>';case"warning":return'<span class="status-icon warning">⚠</span>';case"error":return'<span class="status-icon error">✗</span>';default:return""}}addCardToContainer(t){if(!this.container)return;const e=this.createCard(t);this.container.appendChild(e)}removeCard(t){var s;const e=(s=this.container)==null?void 0:s.querySelector(`[data-card-id="${t}"]`);e&&(e.remove(),this.cards.delete(t))}updateCard(t,e){var a;const s=this.cards.get(t);if(!s)return;const c={...s,...e};this.cards.set(t,c);const d=(a=this.container)==null?void 0:a.querySelector(`[data-card-id="${t}"]`);if(d){const n=this.createCard(c);d.replaceWith(n)}}setContainer(t){this.container=t}getCards(){return Array.from(this.cards.values())}clearCards(){this.container&&(this.container.innerHTML=""),this.cards.clear()}}export{h as CardManager};
